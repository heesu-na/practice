/*
 * This file/code is part of Paper UI project.
 *
 * Paper UI - is a modern front-end framework based on Material Design by Google
 * https://github.com/virtyaluk/paper-ui
 *
 * Copyright (c) 2015 Bohdan Shtepan
 * http://modern-dev.com/
 *
 * Licensed under the MIT license.
 */
 {"version":3,"sources":["PaperRipple.js"],"names":["ElementRect","element","_element","width","boundingRect","height","size","Math","max","x","y","euclideanDistance","clientX","clientY","l","left","t","top","w","h","_x","_y","getBoundingClientRect","point1","point2","sqrt","pow","_window","window","_doc","document","_now","performance","now","bind","Date","PaperWave","$","recenters","center","initialOpacity","opacityDecayVelocity","color","getComputedStyle","containerRect","$wave","createElement","classList","add","style","backgroundColor","appendChild","resetDefaults","maxRadius","touchDownStarted","touchUpStarted","startPosition","endPosition","cssString","scaleFactor","radius","containerCenter","currentPos","currentPosition","deltaPos","opacity","webkitTransform","mozTransform","msTransform","oTransform","transform","event","distanceToFarthestCorner","isTouchDown","parentNode","removeChild","elapsed","touchUpElapsed","touchDownElapsed","touchDownElapsedSeconds","touchUpElapsedSeconds","min","MAX_RADIUS","currentTime","mouseInteractionSeconds","actualRadius","abs","isWaveFullyOpaque","isMaxRadiusReached","translateFraction","translationFraction","PaperRipple","cfg","round","target","_waves","_initTarget","nodeType","$background","querySelector","$waves","wave","push","ev","addWave","downAction","animate","forEach","upAction","waveIndex","indexOf","splice","remove","i","length","draw","outerOpacity","removeWave","shouldKeepAnimating","requestAnimationFrame","hasAttribute","newValue","contains","toggle","some","isAnimationComplete","module","exports"],"mappings":"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","file":"PaperRipple.js","sourcesContent":["/**\n * This file\\code is part of Paper UI project.\n *\n * Paper UI - is a modern front-end framework based on Material Design by Google\n * https://github.com/virtyaluk/paper-ui\n *\n * Copyright (c) 2015 Bohdan Shtepan\n * http://modern-dev.com/\n *\n * Licensed under the MIT license.\n */\n\n/*eslint no-unused-vars: 0*/\n\n/**\n * Provides the utilities for getting element's metrics.\n *\n * @class ElementRect\n */\nclass ElementRect {\n    /**\n     * Initializes a new instance of the `ElementRect` class with the specified `element`.\n     *\n     * @constructs ElementRect\n     * @param {HTMLElement} element - The DOM element to get metrics from\n     * @returns {ElementRect} The new instance of a class.\n     */\n    constructor(element) {\n        this._element = element;\n\n        /**\n         * Returns the width of the current element.\n         *\n         * @type {Number}\n         */\n        this.width = this.boundingRect.width;\n\n        /**\n         * Returns the height of the current element.\n         *\n         * @type {Number}\n         */\n        this.height = this.boundingRect.height;\n\n        /**\n         * Returns the size (the biggest side) of the current element.\n         *\n         * @type {number}\n         */\n        this.size = Math.max(this.width, this.height);\n\n        return this;\n    }\n\n    /**\n     * Returns the center coordinates of the current element.\n     *\n     * @returns {{ x: Number, y: Number }} Object containing coordinates of the element's center.\n     */\n    get center() {\n        return {\n            x: this.width / 2,\n            y: this.height / 2\n        };\n    }\n\n    /**\n     * Returns the size of the current element and its position relative to the viewport.\n     *\n     * @returns {ClientRect} The returned value is a `ClientRect` object, which contains read-only `left`, `top`, `right` and `bottom` properties\n     * describing the border-box in pixels. `top` and `left` are relative to the top-left of the viewport.\n     */\n    get boundingRect() {\n        return this._element.getBoundingClientRect();\n    }\n\n    /**\n     * Calculates euclidean distance between two points.\n     *\n     * @static\n     * @param {{ x: Number, y: Number }} point1 - Start point\n     * @param {{ x: Number, y: Number }} point2 - End point\n     * @returns {Number} Distance between two points.\n     */\n    static euclideanDistance(point1, point2) {\n        return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n    }\n\n    /**\n     * Calculates the distance between given point and farthest corner of the current element.\n     *\n     * @param {{ x: Number, y:Number }} [point={x:0,y:0}] - The point object containing x and y coordinates.\n     * @returns {Number} Distance from a point to the container's farthest corner.\n     */\n    distanceToFarthestCorner({ x = 0, y = 0 }) {\n        return Math.max(\n            ElementRect.euclideanDistance({ x, y }, { x: 0, y: 0 }),\n            ElementRect.euclideanDistance({ x, y }, { x: this.width, y: 0 }),\n            ElementRect.euclideanDistance({ x, y }, { x: 0, y: this.height }),\n            ElementRect.euclideanDistance({ x, y }, { x: this.width, y: this.height })\n        );\n    }\n\n    /**\n     *  Determines if the specified point is contained within this element.\n     *\n     * @param {(Event|Object)} ev - The object containing coordinates of the point.\n     * @param {Number} ev.x - The `x` coordinate of the point.\n     * @param {Number} ev.y - The `y` coordinate of the point.\n     * @param {Number} ev.clientX - The `x` coordinate of the point.\n     * @param {Number} ev.clientY - The `y` coordinate of the point.\n     * @returns {Boolean} Returns `true` if the `x` and `y` coordinates of point is a point inside this element's rectangle, otherwise `false`.\n     */\n    contains({ x, y, clientX, clientY }) {\n        let l = this.boundingRect.left,\n            t = this.boundingRect.top,\n            w = this.boundingRect.width,\n            h = this.boundingRect.height,\n            _x = x || clientX || 0,\n            _y = y || clientY || 0;\n\n        return _x >= l && _x <= l + w && _y >= t && _y <= t + h;\n    }\n}\n/**\n * This file\\code is part of Paper UI project.\n *\n * Paper UI - is a modern front-end framework based on Material Design by Google\n * https://github.com/virtyaluk/paper-ui\n *\n * Copyright (c) 2015 Bohdan Shtepan\n * http://modern-dev.com/\n *\n * Licensed under the MIT license.\n */\n\n/*eslint no-unused-vars: 0*/\n\nlet _window = window || this,\n    _doc = _window.document,\n    _now = (function() {\n        return _window.performance && _window.performance.now ? _window.performance.now.bind(_window.performance) : Date.now;\n    }());\n\n/**\n * Provides all the logic to produce a one-time rippling effect.\n *\n * @class PaperWave\n */\nclass PaperWave {\n    /**\n     * Initializes a new instance of the `PaperWave` class with the specified `PaperRipple` instance.\n     *\n     * @constructs PaperWave\n     * @returns {PaperWave} The new instance of a class.\n     *\n     * @example\n     * var paperWave = new PaperWave(paperRipple);\n     *\n     * paperWave.downAction(null);\n     * paperWave.upAction();\n     *\n     * if (paperWave.isAnimationCompleted) {\n     *     paperWave.remove();\n     * }\n     */\n    constructor({ $, recenters = false, center = false, initialOpacity = 0.25, opacityDecayVelocity = 0.8 }) {\n        /**\n         * Gets or sets the color of the wave.\n         *\n         * @type {String}\n         */\n        this.color = _window.getComputedStyle($).color;\n\n        /**\n         * Gets or sets the container metrics of the wave.\n         *\n         * @type {ElementRect}\n         */\n        this.containerRect = new ElementRect($);\n\n        /**\n         * Determines whether the wave should be re-centered towards the center of its container.\n         *\n         * @type {Boolean}\n         */\n        this.recenters = recenters;\n\n        /**\n         * Determines whether the wave should start a movement from the center of its container.\n         *\n         * @type {Boolean}\n         */\n        this.center = center;\n\n        /**\n         * Gets initial opacity of the wave.\n         *\n         * @type {Number}\n         */\n        this.initialOpacity = initialOpacity;\n\n        /**\n         * Gets opacity decay velocity of the wave.\n         *\n         * @type {Number}\n         */\n        this.opacityDecayVelocity = opacityDecayVelocity;\n\n        /**\n         * Represents the object wrapped around the `wave` DOM element that belongs to the current instance.\n         *\n         * @type {Object}\n         */\n        this.$wave = _doc.createElement('div');\n\n        this.$wave.classList.add('paper-ripple__wave');\n        this.$wave.style.backgroundColor = this.color;\n\n        /**\n         * Represents the object wrapped around the main DOM element that belongs to the current instance.\n         *\n         * @type {Object}\n         */\n        this.$ = _doc.createElement('div');\n\n        this.$.classList.add('paper-ripple__wave-container');\n        this.$.appendChild(this.$wave);\n\n        this.resetDefaults();\n\n        return this;\n    }\n\n    /**\n     * Represents the max possible value of the wave's radius.\n     *\n     * @const {Number}\n     * @default\n     */\n    static MAX_RADIUS = 300;\n\n\n    /**\n     * Gets the time in milliseconds elapsed from the moment where interaction with the wave was started.\n     *\n     * @returns {Number} The time in milliseconds.\n     */\n    get touchDownElapsed() {\n        var elapsed;\n\n        if (!this.touchDownStarted) {\n            return 0;\n        }\n\n        elapsed = _now() - this.touchDownStarted;\n\n        if (this.touchUpStarted) {\n            elapsed -= this.touchUpElapsed;\n        }\n\n        return elapsed;\n    }\n\n    /**\n     * Gets the time in milliseconds elapsed from the moment where interaction with the wave was ended.\n     *\n     * @returns {Number} The time in milliseconds.\n     */\n    get touchUpElapsed() {\n        return this.touchUpStarted ? _now() - this.touchUpStarted : 0;\n    }\n\n    /**\n     * Gets the time in seconds elapsed since the moment where interaction with the wave was started.\n     *\n     * @returns {Number} The time in seconds.\n     */\n    get touchDownElapsedSeconds() {\n        return this.touchDownElapsed / 1000;\n    }\n\n    /**\n     * Gets the time in seconds elapsed since the moment where interaction with the wave was ended.\n     *\n     * @returns {number} The time in seconds.\n     */\n    get touchUpElapsedSeconds() {\n        return this.touchUpElapsed / 1000;\n    }\n\n    /**\n     * Gets the total interaction time.\n     *\n     * @returns {Number} The time in seconds\n     */\n    get mouseInteractionSeconds() {\n        return this.touchDownElapsedSeconds + this.touchUpElapsedSeconds;\n    }\n\n    /**\n     * Gets the wave's radius at the current time.\n     *\n     * @returns {Number} The value of the wave's radius.\n     */\n    get radius() {\n        let radius = Math.min(\n                Math.sqrt(Math.pow(this.containerRect.width, 2) + Math.pow(this.containerRect.height, 2)),\n                PaperWave.MAX_RADIUS\n                ) * 1.1 + 5,\n            elapsed = 1.1 - 0.2 * (radius / PaperWave.MAX_RADIUS),\n            currentTime = this.mouseInteractionSeconds / elapsed,\n            actualRadius = radius * (1 - Math.pow(80, -currentTime));\n\n        return Math.abs(actualRadius);\n    }\n\n    /**\n     * Gets the wave's opacity at the current time.\n     *\n     * @returns {Number} The value of the wave's opacity.\n     */\n    get opacity() {\n        if (!this.touchUpStarted) {\n            return this.initialOpacity;\n        }\n\n        return Math.max(0, this.initialOpacity - this.touchUpElapsedSeconds * this.opacityDecayVelocity);\n    }\n\n    /**\n     * Gets the wave's outer opacity at the current time.\n     *\n     * @returns {Number} The value of the wave's outer opacity.\n     */\n    get outerOpacity() {\n        return Math.max(0, Math.min(this.touchUpElapsedSeconds * 0.3, this.opacity));\n    }\n\n    /**\n     * Determines whether the wave is fully opaque or not.\n     *\n     * @returns {Boolean} `true`, if so, otherwise `false`.\n     */\n    get isWaveFullyOpaque() {\n        return this.opacity < 0.01 && this.radius >= Math.min(this.maxRadius, PaperWave.MAX_RADIUS);\n    }\n\n    /**\n     * Determines whether the wave reached its max radius or not.\n     *\n     * @returns {Boolean} `true`, if so, otherwise `false`.\n     */\n    get isMaxRadiusReached() {\n        return this.opacity >= this.initialOpacity && this.radius >= Math.min(this.maxRadius, PaperWave.MAX_RADIUS);\n    }\n\n    /**\n     * Determines whether the animation of rippling effect completed or not.\n     *\n     * @returns {Boolean} `true`, if so, otherwise `false`.\n     */\n    get isAnimationComplete() {\n        return this.touchUpStarted ? this.isWaveFullyOpaque : this.isMaxRadiusReached;\n    }\n\n    /**\n     * Gets the wave's translation fraction value.\n     *\n     * @returns {Number} The value of the wave's translation fraction.\n     */\n    get translationFraction() {\n        return Math.min(1, this.radius / this.containerRect.size * 2 / Math.sqrt(2));\n    }\n\n    /**\n     * Gets the wave's current position.\n     *\n     * @returns {{x: Number, y: Number}} Object containing coordinates of the wave's current position.\n     */\n    get currentPosition() {\n        let translateFraction = this.translationFraction,\n            x = this.startPosition.x,\n            y = this.startPosition.y;\n\n        if (this.endPosition.x) {\n            x = this.startPosition.x + translateFraction * (this.endPosition.x - this.startPosition.x);\n        }\n\n        if (this.endPosition.y) {\n            y = this.startPosition.y + translateFraction * (this.endPosition.y - this.startPosition.y);\n        }\n\n        return { x, y };\n    }\n\n    /**\n     * Determines whether the pointing device is still in interaction with the current wave.\n     *\n     * @returns {Boolean} `true`, if so, otherwise `false`.\n     */\n    get isTouchDown() {\n        return this.touchDownStarted && !this.touchUpStarted;\n    }\n\n    /**\n     * Resets all the wave's values.\n     *\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n    resetDefaults() {\n        /**\n         * Gets or sets max radius of the wave.\n         *\n         * @type {Number}\n         */\n        this.maxRadius = 0;\n\n        /**\n         * Gets or sets the time of starting interaction with the wave.\n         *\n         * @type {Number}\n         */\n        this.touchDownStarted = 0;\n\n        /**\n         * Gets or sets the time of ending interaction with the wave.\n         *\n         * @type {Number}\n         */\n        this.touchUpStarted = 0;\n\n        /**\n         * Gets or sets the start position of the wave.\n         *\n         * @type {{x: Number, y: Number}}\n         */\n        this.startPosition = { x: 0, y: 0 };\n\n        /**\n         * Gets or sets the end position of the wave.\n         *\n         * @type {{x: Number, y: Number}}\n         */\n        this.endPosition = { x: 0, y: 0 };\n\n        return this;\n    }\n\n    /**\n     * Performs updating of the wave's values.\n     *\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n    draw() {\n        let cssString,\n            scaleFactor = this.radius / (this.containerRect.size / 2),\n            containerCenter = this.containerRect.center,\n            currentPos = this.currentPosition,\n            deltaPos = {\n                x: currentPos.x - containerCenter.x,\n                y: currentPos.y - containerCenter.y\n            };\n\n        this.$wave.style.opacity = this.opacity;\n\n        cssString = 'translate(' + deltaPos.x + 'px, ' + deltaPos.y + 'px)';\n        this.$.style.webkitTransform = cssString;\n        this.$.style.mozTransform = cssString;\n        this.$.style.msTransform = cssString;\n        this.$.style.oTransform = cssString;\n        this.$.style.transform = 'translate3d(' + deltaPos.x + 'px, ' + deltaPos.y + 'px, 0)';\n\n        cssString = 'scale(' + scaleFactor + ',' + scaleFactor + ')';\n        this.$wave.style.webkitTransform = cssString;\n        this.$wave.style.mozTransform = cssString;\n        this.$wave.style.msTransform = cssString;\n        this.$wave.style.oTransform = cssString;\n        this.$wave.style.transform = 'scale3d(' + scaleFactor + ',' + scaleFactor + ', 1)';\n\n        return this;\n    }\n\n    /**\n     * Performs ripple-down effect on the current wave.\n     *\n     * @param {(Event|Object)} [event=null] - An object containing coordinates of interaction point to set start position of ripple effect.\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n    downAction(event = null) {\n        let containerCenter = this.containerRect.center;\n\n        this.resetDefaults();\n\n        this.touchDownStarted = _now();\n        this.startPosition = this.center || !event ? containerCenter : {\n            x: (event.clientX || event.x) - this.containerRect.boundingRect.left,\n            y: (event.clientY || event.y) - this.containerRect.boundingRect.top\n        };\n        this.endPosition = this.recenters ? containerCenter : this.endPosition;\n        this.maxRadius = this.containerRect.distanceToFarthestCorner(this.startPosition);\n\n        this.$.style.top = (this.containerRect.height - this.containerRect.size) / 2 + 'px';\n        this.$.style.left = (this.containerRect.width - this.containerRect.size) / 2 + 'px';\n        this.$.style.width = this.containerRect.size + 'px';\n        this.$.style.height = this.containerRect.size + 'px';\n\n        return this;\n    }\n\n    /**\n     * Performs ripple-up effect on the current wave.\n     *\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n    upAction() {\n        if (!this.isTouchDown) {\n            return this;\n        }\n\n        /**\n         * @private\n         */\n        this.touchUpStarted = _now();\n\n        return this;\n    }\n\n    /**\n     * Removes the wave from a DOM.\n     *\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n    remove() {\n        this.$.parentNode.removeChild(this.$);\n\n        return this;\n    }\n}\n/**\n * This file\\code is part of Paper UI project.\n *\n * Paper UI - is a modern front-end framework based on Material Design by Google\n * https://github.com/virtyaluk/paper-ui\n *\n * Copyright (c) 2015 Bohdan Shtepan\n * http://modern-dev.com/\n *\n * Licensed under the MIT license.\n */\n\n/**\n * Provides all the logic to produce ripple visual effect.\n * Other elements can use it to simulate rippling effect emanating from the point of contact.\n *\n * @class PaperRipple\n */\nclass PaperRipple {\n    /**\n     * Initializes a new instance of the `PaperRipple` class with the specified `config` object.\n     *\n     * @constructs PaperRipple\n     * @param {(Object|Element)} [cfg={}] - A configuration object.\n     * @param {Number} [cfg.initialOpacity=0.25] - The initial opacity of the each wave.\n     * @param {Number} [cfg.opacityDecayVelocity=0.8] - How fast (opacity per second) the wave fades out.\n     * @param {Boolean} [cfg.recenters=false] - If `true`, waves will exhibit a gravitational pull towards the center of their container as they fade away.\n     * @param {Boolean} [cfg.center=false] - If `true`, waves will center inside its container.\n     * @param {Boolean} [cfg.round=false] - If `true`, ripple effect will apply within a circle.\n     * @param {Element} [cfg.target=null] - Target DOM element as the container for the waves.\n     * If target element is not presented, then new one will be created automatically.\n     * @returns {PaperRipple} The new instance of a class.\n     *\n     * @example\n     * // Creating the new instance\n     * var ripple = new PaperRipple({ recenters: true });\n     *\n     * // Appending it to another DOM element\n     * ripple.$.appendTo(someEl);\n     *\n     * // Listening to that element's events and performing ripple effect\n     * someEl.on({\n     *     mousedown: function(ev) {\n     *         ripple.downAction(ev);\n     *     },\n     *     mouseup: function() {\n     *         ripple.upAction();\n     *     }\n     * );\n     */\n    constructor(cfg) {\n        let { initialOpacity = 0.25, opacityDecayVelocity = 0.8, recenters = false, center = false, round = false, target = null } = cfg || {};\n\n        /**\n         * Gets or sets the initial opacity of the each wave.\n         *\n         * @type {Number}\n         */\n        this.initialOpacity = initialOpacity;\n\n        /**\n         * Gets or sets how fast (opacity per second) the wave fades out.\n         *\n         * @type {Number}\n         */\n        this.opacityDecayVelocity = opacityDecayVelocity;\n\n        /**\n         * @type {PaperWave[]}\n         * @private\n         */\n        this._waves = [];\n\n        this._initTarget(cfg && cfg.nodeType ? cfg : target && target.nodeType ? target : null);\n\n        /**\n         * @type {Boolean}\n         * @private\n         */\n        this.recenters = recenters || this.recenters;\n\n        /**\n         * @type {Boolean}\n         * @private\n         */\n        this.center = center || this.center;\n\n        /**\n         * @type {Boolean}\n         * @private\n         */\n        this.round = round || this.round;\n\n        return this;\n    }\n\n    /**\n     * Determines whether all the waves should be re-centered towards the center of the container.\n     *\n     * @returns {Boolean} If `true`, waves will exhibit a gravitational pull towards the center of the container as they fade away.\n     */\n    get recenters() {\n        return this.$.hasAttribute('recenters');\n    }\n\n    /**\n     * Sets the value that indicates whether all the waves should be re-centered towards the center of the container.\n     *\n     * @param {Boolean} [newValue=false] - The new value.\n     * @returns {void} Nothing.\n     */\n    set recenters(newValue) {\n        this.$[newValue ? 'setAttribute' : 'removeAttribute']('recenters', '');\n    }\n\n    /**\n     * Determines whether all the waves should start a movement from the center of the container.\n     *\n     * @returns {Boolean} If `true`, waves will center inside its container\n     */\n    get center() {\n        return this.$.hasAttribute('center');\n    }\n\n    /**\n     * Sets the value that indicates whether all the waves should start a movement from the center of the container.\n     *\n     * @param {Boolean} [newValue=false] - The new value.\n     * @returns {void} Nothing.\n     */\n    set center(newValue) {\n        this.$[newValue ? 'setAttribute' : 'removeAttribute']('center', '');\n    }\n\n    /**\n     * Determines whether ripple effect should apply within a circle.\n     *\n     * @returns {Boolean} If `true`, ripple effect will apply within a circle.\n     */\n    get round() {\n        return this.$.classList.contains('paper-ripple--round');\n    }\n\n    /**\n     * Sets the value that indicates whether ripple effect should apply within a circle.\n     *\n     * @param {Boolean} [newValue=false] - The new value.\n     * @returns {void} Nothing.\n     */\n    set round(newValue) {\n        this.$.classList.toggle('paper-ripple--round', newValue);\n    }\n\n    /**\n     * Determines whether the ripple should keep animating or not.\n     *\n     * @returns {Boolean} `true`, if so, otherwise `false`.\n     */\n    get shouldKeepAnimating() {\n        return this._waves.some(wave => !wave.isAnimationComplete);\n    }\n\n    /**\n     * @param {HTMLElement} [target=null] - Target DOM element.\n     * @returns {PaperRipple} Current instance for method chaining.\n     * @private\n     */\n    _initTarget(target = null) {\n        // eslint-disable-next-line no-use-before-define\n        let _doc = _doc || window.document;\n\n        if (!this.$) {\n            /**\n             * The object wrapper containing all the DOM elements belongs to the current instance.\n             *\n             * @type {Object}\n             */\n            this.$ = target || _doc.createElement('div');\n            this.$.classList.add('paper-ripple');\n        }\n\n        if (!this.$background) {\n            /**\n             * The object wrapper containing the `$background` DOM element belongs to the current instance.\n             *\n             * @type {Object}\n             */\n            this.$background = target && target.querySelector('.paper-ripple__background') || _doc.createElement('div');\n\n            this.$background.classList.add('paper-ripple__background');\n            this.$.appendChild(this.$background);\n        }\n\n        if (!this.$waves) {\n            /**\n             * The object wrapper containing the waves container belongs to the current instance.\n             *\n             * @type {Object}\n             */\n            this.$waves = target && target.querySelector('.paper-ripple__waves') || _doc.createElement('div');\n\n            this.$waves.classList.add('paper-ripple__waves');\n            this.$.appendChild(this.$waves);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds new wave to the list of visual ripples.\n     *\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n    addWave() {\n        let wave = new PaperWave(this);\n\n        this.$waves.appendChild(wave.$);\n        this.$background.style.backgroundColor = wave.color;\n        this._waves.push(wave);\n\n        return wave;\n    }\n\n    /**\n     * Produces a ripple-down effect.\n     *\n     * @param {(Event|{clientX: Number, clientY: Number}|{x: Number, y: Number})} [ev=null] - Object containing coordinates of the point of contact.\n     * @returns {PaperRipple} Current instance for method chaining.\n     */\n    downAction(ev) {\n        let wave = this.addWave();\n\n        wave.downAction(ev);\n        this.animate();\n\n        return this;\n    }\n\n    /**\n     * Produces a ripple-up effect.\n     *\n     * @returns {PaperRipple} Current instance for method chaining.\n     */\n    upAction() {\n        this._waves.forEach(wave => {\n            wave.upAction();\n        });\n\n        this.animate();\n\n        return this;\n    }\n\n    /**\n     * Removes given wave from the list of visual ripples.\n     *\n     * @param {PaperWave} wave - The wave to remove.\n     * @returns {PaperRipple} Current instance for method chaining.\n     */\n    removeWave(wave) {\n        let waveIndex = this._waves.indexOf(wave);\n\n        if (waveIndex < 0) {\n            return this;\n        }\n\n        this._waves.splice(waveIndex, 1);\n\n        wave.remove();\n\n        return this;\n    }\n\n    /**\n     * Animates all the waves in the list of visual ripples.\n     *\n     * @returns {PaperRipple} Current instance for method chaining.\n     */\n    animate() {\n        let i,\n            l,\n            wave;\n\n        for (i = 0, l = this._waves.length; i < l; i++) {\n            wave = this._waves[i];\n\n            if (wave) {\n                wave.draw();\n\n                this.$background.style.opacity = wave.outerOpacity;\n\n                if (wave.isWaveFullyOpaque && !wave.isMaxRadiusReached) {\n                    this.removeWave(wave);\n                }\n            }\n        }\n\n        if (!this.shouldKeepAnimating && this._waves.length === 0) {\n            this.$background.style.backgroundColor = null;\n        } else {\n            window.requestAnimationFrame(this.animate.bind(this));\n        }\n\n        return this;\n    }\n}\n\nmodule.exports = PaperRipple;"]}