/*
 * This file/code is part of Paper UI project.
 *
 * Paper UI - is a modern front-end framework based on Material Design by Google
 * https://github.com/virtyaluk/paper-ui
 *
 * Copyright (c) 2015 Bohdan Shtepan
 * http://modern-dev.com/
 *
 * Licensed under the MIT license.
 */
 {"version":3,"sources":["PaperRipple.js"],"names":["System","register","_export","_context","_classCallCheck","instance","Constructor","TypeError","_createClass","ElementRect","_window","_doc","_now","PaperWave","PaperRipple","setters","execute","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","element","this","_element","width","boundingRect","height","size","Math","max","value","_ref","_ref$x","x","undefined","_ref$y","y","euclideanDistance","_ref2","clientX","clientY","l","left","t","top","w","h","_x","_y","get","getBoundingClientRect","point1","point2","sqrt","pow","window","document","performance","now","bind","Date","_ref3","$","_ref3$recenters","recenters","_ref3$center","center","_ref3$initialOpacity","initialOpacity","_ref3$opacityDecayVel","opacityDecayVelocity","color","getComputedStyle","containerRect","$wave","createElement","classList","add","style","backgroundColor","appendChild","resetDefaults","maxRadius","touchDownStarted","touchUpStarted","startPosition","endPosition","cssString","scaleFactor","radius","containerCenter","currentPos","currentPosition","deltaPos","opacity","webkitTransform","mozTransform","msTransform","oTransform","transform","event","arguments","distanceToFarthestCorner","isTouchDown","parentNode","removeChild","elapsed","touchUpElapsed","touchDownElapsed","touchDownElapsedSeconds","touchUpElapsedSeconds","min","MAX_RADIUS","currentTime","mouseInteractionSeconds","actualRadius","abs","isWaveFullyOpaque","isMaxRadiusReached","translateFraction","translationFraction","cfg","_ref4","_ref4$initialOpacity","_ref4$opacityDecayVel","_ref4$recenters","_ref4$center","_ref4$round","round","_ref4$target","_waves","_initTarget","nodeType","$background","querySelector","$waves","wave","push","ev","addWave","downAction","animate","forEach","upAction","waveIndex","indexOf","splice","remove","draw","outerOpacity","removeWave","shouldKeepAnimating","requestAnimationFrame","hasAttribute","set","newValue","contains","toggle","some","isAnimationComplete","module","exports"],"mappings":"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","file":"PaperRipple.js","sourcesContent":["/*\n * This file/code is part of Paper UI project.\n *\n * Paper UI - is a modern front-end framework based on Material Design by Google\n * https://github.com/virtyaluk/paper-ui\n *\n * Copyright (c) 2015 Bohdan Shtepan\n * http://modern-dev.com/\n *\n * Licensed under the MIT license.\n */\n 'use strict';\n\nSystem.register('PaperRipple', [], function (_export, _context) {\n  \"use strict\";\n\n  var _createClass, ElementRect, _window, _doc, _now, PaperWave, PaperRipple;\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  return {\n    setters: [],\n    execute: function () {\n      _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      ElementRect = function () {\n        /**\n         * Initializes a new instance of the `ElementRect` class with the specified `element`.\n         *\n         * @constructs ElementRect\n         * @param {HTMLElement} element - The DOM element to get metrics from\n         * @returns {ElementRect} The new instance of a class.\n         */\n        function ElementRect(element) {\n          _classCallCheck(this, ElementRect);\n\n          this._element = element;\n\n          /**\n           * Returns the width of the current element.\n           *\n           * @type {Number}\n           */\n          this.width = this.boundingRect.width;\n\n          /**\n           * Returns the height of the current element.\n           *\n           * @type {Number}\n           */\n          this.height = this.boundingRect.height;\n\n          /**\n           * Returns the size (the biggest side) of the current element.\n           *\n           * @type {number}\n           */\n          this.size = Math.max(this.width, this.height);\n\n          return this;\n        }\n\n        /**\n         * Returns the center coordinates of the current element.\n         *\n         * @returns {{ x: Number, y: Number }} Object containing coordinates of the element's center.\n         */\n\n\n        _createClass(ElementRect, [{\n          key: 'distanceToFarthestCorner',\n          value: function distanceToFarthestCorner(_ref) {\n            var _ref$x = _ref.x,\n                x = _ref$x === undefined ? 0 : _ref$x,\n                _ref$y = _ref.y,\n                y = _ref$y === undefined ? 0 : _ref$y;\n\n            return Math.max(ElementRect.euclideanDistance({ x: x, y: y }, { x: 0, y: 0 }), ElementRect.euclideanDistance({ x: x, y: y }, { x: this.width, y: 0 }), ElementRect.euclideanDistance({ x: x, y: y }, { x: 0, y: this.height }), ElementRect.euclideanDistance({ x: x, y: y }, { x: this.width, y: this.height }));\n          }\n        }, {\n          key: 'contains',\n          value: function contains(_ref2) {\n            var x = _ref2.x,\n                y = _ref2.y,\n                clientX = _ref2.clientX,\n                clientY = _ref2.clientY;\n\n            var l = this.boundingRect.left,\n                t = this.boundingRect.top,\n                w = this.boundingRect.width,\n                h = this.boundingRect.height,\n                _x = x || clientX || 0,\n                _y = y || clientY || 0;\n\n            return _x >= l && _x <= l + w && _y >= t && _y <= t + h;\n          }\n        }, {\n          key: 'center',\n          get: function get() {\n            return {\n              x: this.width / 2,\n              y: this.height / 2\n            };\n          }\n        }, {\n          key: 'boundingRect',\n          get: function get() {\n            return this._element.getBoundingClientRect();\n          }\n        }], [{\n          key: 'euclideanDistance',\n          value: function euclideanDistance(point1, point2) {\n            return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n          }\n        }]);\n\n        return ElementRect;\n      }();\n\n      _window = window || undefined;\n      _doc = _window.document;\n\n      _now = function () {\n        return _window.performance && _window.performance.now ? _window.performance.now.bind(_window.performance) : Date.now;\n      }();\n\n      PaperWave = function () {\n        /**\n         * Initializes a new instance of the `PaperWave` class with the specified `PaperRipple` instance.\n         *\n         * @constructs PaperWave\n         * @returns {PaperWave} The new instance of a class.\n         *\n         * @example\n         * var paperWave = new PaperWave(paperRipple);\n         *\n         * paperWave.downAction(null);\n         * paperWave.upAction();\n         *\n         * if (paperWave.isAnimationCompleted) {\n         *     paperWave.remove();\n         * }\n         */\n        function PaperWave(_ref3) {\n          var $ = _ref3.$,\n              _ref3$recenters = _ref3.recenters,\n              recenters = _ref3$recenters === undefined ? false : _ref3$recenters,\n              _ref3$center = _ref3.center,\n              center = _ref3$center === undefined ? false : _ref3$center,\n              _ref3$initialOpacity = _ref3.initialOpacity,\n              initialOpacity = _ref3$initialOpacity === undefined ? 0.25 : _ref3$initialOpacity,\n              _ref3$opacityDecayVel = _ref3.opacityDecayVelocity,\n              opacityDecayVelocity = _ref3$opacityDecayVel === undefined ? 0.8 : _ref3$opacityDecayVel;\n\n          _classCallCheck(this, PaperWave);\n\n          /**\n           * Gets or sets the color of the wave.\n           *\n           * @type {String}\n           */\n          this.color = _window.getComputedStyle($).color;\n\n          /**\n           * Gets or sets the container metrics of the wave.\n           *\n           * @type {ElementRect}\n           */\n          this.containerRect = new ElementRect($);\n\n          /**\n           * Determines whether the wave should be re-centered towards the center of its container.\n           *\n           * @type {Boolean}\n           */\n          this.recenters = recenters;\n\n          /**\n           * Determines whether the wave should start a movement from the center of its container.\n           *\n           * @type {Boolean}\n           */\n          this.center = center;\n\n          /**\n           * Gets initial opacity of the wave.\n           *\n           * @type {Number}\n           */\n          this.initialOpacity = initialOpacity;\n\n          /**\n           * Gets opacity decay velocity of the wave.\n           *\n           * @type {Number}\n           */\n          this.opacityDecayVelocity = opacityDecayVelocity;\n\n          /**\n           * Represents the object wrapped around the `wave` DOM element that belongs to the current instance.\n           *\n           * @type {Object}\n           */\n          this.$wave = _doc.createElement('div');\n\n          this.$wave.classList.add('paper-ripple__wave');\n          this.$wave.style.backgroundColor = this.color;\n\n          /**\n           * Represents the object wrapped around the main DOM element that belongs to the current instance.\n           *\n           * @type {Object}\n           */\n          this.$ = _doc.createElement('div');\n\n          this.$.classList.add('paper-ripple__wave-container');\n          this.$.appendChild(this.$wave);\n\n          this.resetDefaults();\n\n          return this;\n        }\n\n        /**\n         * Represents the max possible value of the wave's radius.\n         *\n         * @const {Number}\n         * @default\n         */\n\n\n        _createClass(PaperWave, [{\n          key: 'resetDefaults',\n          value: function resetDefaults() {\n            /**\n             * Gets or sets max radius of the wave.\n             *\n             * @type {Number}\n             */\n            this.maxRadius = 0;\n\n            /**\n             * Gets or sets the time of starting interaction with the wave.\n             *\n             * @type {Number}\n             */\n            this.touchDownStarted = 0;\n\n            /**\n             * Gets or sets the time of ending interaction with the wave.\n             *\n             * @type {Number}\n             */\n            this.touchUpStarted = 0;\n\n            /**\n             * Gets or sets the start position of the wave.\n             *\n             * @type {{x: Number, y: Number}}\n             */\n            this.startPosition = { x: 0, y: 0 };\n\n            /**\n             * Gets or sets the end position of the wave.\n             *\n             * @type {{x: Number, y: Number}}\n             */\n            this.endPosition = { x: 0, y: 0 };\n\n            return this;\n          }\n        }, {\n          key: 'draw',\n          value: function draw() {\n            var cssString = void 0,\n                scaleFactor = this.radius / (this.containerRect.size / 2),\n                containerCenter = this.containerRect.center,\n                currentPos = this.currentPosition,\n                deltaPos = {\n              x: currentPos.x - containerCenter.x,\n              y: currentPos.y - containerCenter.y\n            };\n\n            this.$wave.style.opacity = this.opacity;\n\n            cssString = 'translate(' + deltaPos.x + 'px, ' + deltaPos.y + 'px)';\n            this.$.style.webkitTransform = cssString;\n            this.$.style.mozTransform = cssString;\n            this.$.style.msTransform = cssString;\n            this.$.style.oTransform = cssString;\n            this.$.style.transform = 'translate3d(' + deltaPos.x + 'px, ' + deltaPos.y + 'px, 0)';\n\n            cssString = 'scale(' + scaleFactor + ',' + scaleFactor + ')';\n            this.$wave.style.webkitTransform = cssString;\n            this.$wave.style.mozTransform = cssString;\n            this.$wave.style.msTransform = cssString;\n            this.$wave.style.oTransform = cssString;\n            this.$wave.style.transform = 'scale3d(' + scaleFactor + ',' + scaleFactor + ', 1)';\n\n            return this;\n          }\n        }, {\n          key: 'downAction',\n          value: function downAction() {\n            var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            var containerCenter = this.containerRect.center;\n\n            this.resetDefaults();\n\n            this.touchDownStarted = _now();\n            this.startPosition = this.center || !event ? containerCenter : {\n              x: (event.clientX || event.x) - this.containerRect.boundingRect.left,\n              y: (event.clientY || event.y) - this.containerRect.boundingRect.top\n            };\n            this.endPosition = this.recenters ? containerCenter : this.endPosition;\n            this.maxRadius = this.containerRect.distanceToFarthestCorner(this.startPosition);\n\n            this.$.style.top = (this.containerRect.height - this.containerRect.size) / 2 + 'px';\n            this.$.style.left = (this.containerRect.width - this.containerRect.size) / 2 + 'px';\n            this.$.style.width = this.containerRect.size + 'px';\n            this.$.style.height = this.containerRect.size + 'px';\n\n            return this;\n          }\n        }, {\n          key: 'upAction',\n          value: function upAction() {\n            if (!this.isTouchDown) {\n              return this;\n            }\n\n            /**\n             * @private\n             */\n            this.touchUpStarted = _now();\n\n            return this;\n          }\n        }, {\n          key: 'remove',\n          value: function remove() {\n            this.$.parentNode.removeChild(this.$);\n\n            return this;\n          }\n        }, {\n          key: 'touchDownElapsed',\n          get: function get() {\n            var elapsed;\n\n            if (!this.touchDownStarted) {\n              return 0;\n            }\n\n            elapsed = _now() - this.touchDownStarted;\n\n            if (this.touchUpStarted) {\n              elapsed -= this.touchUpElapsed;\n            }\n\n            return elapsed;\n          }\n        }, {\n          key: 'touchUpElapsed',\n          get: function get() {\n            return this.touchUpStarted ? _now() - this.touchUpStarted : 0;\n          }\n        }, {\n          key: 'touchDownElapsedSeconds',\n          get: function get() {\n            return this.touchDownElapsed / 1000;\n          }\n        }, {\n          key: 'touchUpElapsedSeconds',\n          get: function get() {\n            return this.touchUpElapsed / 1000;\n          }\n        }, {\n          key: 'mouseInteractionSeconds',\n          get: function get() {\n            return this.touchDownElapsedSeconds + this.touchUpElapsedSeconds;\n          }\n        }, {\n          key: 'radius',\n          get: function get() {\n            var radius = Math.min(Math.sqrt(Math.pow(this.containerRect.width, 2) + Math.pow(this.containerRect.height, 2)), PaperWave.MAX_RADIUS) * 1.1 + 5,\n                elapsed = 1.1 - 0.2 * (radius / PaperWave.MAX_RADIUS),\n                currentTime = this.mouseInteractionSeconds / elapsed,\n                actualRadius = radius * (1 - Math.pow(80, -currentTime));\n\n            return Math.abs(actualRadius);\n          }\n        }, {\n          key: 'opacity',\n          get: function get() {\n            if (!this.touchUpStarted) {\n              return this.initialOpacity;\n            }\n\n            return Math.max(0, this.initialOpacity - this.touchUpElapsedSeconds * this.opacityDecayVelocity);\n          }\n        }, {\n          key: 'outerOpacity',\n          get: function get() {\n            return Math.max(0, Math.min(this.touchUpElapsedSeconds * 0.3, this.opacity));\n          }\n        }, {\n          key: 'isWaveFullyOpaque',\n          get: function get() {\n            return this.opacity < 0.01 && this.radius >= Math.min(this.maxRadius, PaperWave.MAX_RADIUS);\n          }\n        }, {\n          key: 'isMaxRadiusReached',\n          get: function get() {\n            return this.opacity >= this.initialOpacity && this.radius >= Math.min(this.maxRadius, PaperWave.MAX_RADIUS);\n          }\n        }, {\n          key: 'isAnimationComplete',\n          get: function get() {\n            return this.touchUpStarted ? this.isWaveFullyOpaque : this.isMaxRadiusReached;\n          }\n        }, {\n          key: 'translationFraction',\n          get: function get() {\n            return Math.min(1, this.radius / this.containerRect.size * 2 / Math.sqrt(2));\n          }\n        }, {\n          key: 'currentPosition',\n          get: function get() {\n            var translateFraction = this.translationFraction,\n                x = this.startPosition.x,\n                y = this.startPosition.y;\n\n            if (this.endPosition.x) {\n              x = this.startPosition.x + translateFraction * (this.endPosition.x - this.startPosition.x);\n            }\n\n            if (this.endPosition.y) {\n              y = this.startPosition.y + translateFraction * (this.endPosition.y - this.startPosition.y);\n            }\n\n            return { x: x, y: y };\n          }\n        }, {\n          key: 'isTouchDown',\n          get: function get() {\n            return this.touchDownStarted && !this.touchUpStarted;\n          }\n        }]);\n\n        return PaperWave;\n      }();\n\n      PaperWave.MAX_RADIUS = 300;\n\n      PaperRipple = function () {\n        /**\n         * Initializes a new instance of the `PaperRipple` class with the specified `config` object.\n         *\n         * @constructs PaperRipple\n         * @param {(Object|Element)} [cfg={}] - A configuration object.\n         * @param {Number} [cfg.initialOpacity=0.25] - The initial opacity of the each wave.\n         * @param {Number} [cfg.opacityDecayVelocity=0.8] - How fast (opacity per second) the wave fades out.\n         * @param {Boolean} [cfg.recenters=false] - If `true`, waves will exhibit a gravitational pull towards the center of their container as they fade away.\n         * @param {Boolean} [cfg.center=false] - If `true`, waves will center inside its container.\n         * @param {Boolean} [cfg.round=false] - If `true`, ripple effect will apply within a circle.\n         * @param {Element} [cfg.target=null] - Target DOM element as the container for the waves.\n         * If target element is not presented, then new one will be created automatically.\n         * @returns {PaperRipple} The new instance of a class.\n         *\n         * @example\n         * // Creating the new instance\n         * var ripple = new PaperRipple({ recenters: true });\n         *\n         * // Appending it to another DOM element\n         * ripple.$.appendTo(someEl);\n         *\n         * // Listening to that element's events and performing ripple effect\n         * someEl.on({\n         *     mousedown: function(ev) {\n         *         ripple.downAction(ev);\n         *     },\n         *     mouseup: function() {\n         *         ripple.upAction();\n         *     }\n         * );\n         */\n        function PaperRipple(cfg) {\n          _classCallCheck(this, PaperRipple);\n\n          var _ref4 = cfg || {},\n              _ref4$initialOpacity = _ref4.initialOpacity,\n              initialOpacity = _ref4$initialOpacity === undefined ? 0.25 : _ref4$initialOpacity,\n              _ref4$opacityDecayVel = _ref4.opacityDecayVelocity,\n              opacityDecayVelocity = _ref4$opacityDecayVel === undefined ? 0.8 : _ref4$opacityDecayVel,\n              _ref4$recenters = _ref4.recenters,\n              recenters = _ref4$recenters === undefined ? false : _ref4$recenters,\n              _ref4$center = _ref4.center,\n              center = _ref4$center === undefined ? false : _ref4$center,\n              _ref4$round = _ref4.round,\n              round = _ref4$round === undefined ? false : _ref4$round,\n              _ref4$target = _ref4.target,\n              target = _ref4$target === undefined ? null : _ref4$target;\n\n          /**\n           * Gets or sets the initial opacity of the each wave.\n           *\n           * @type {Number}\n           */\n          this.initialOpacity = initialOpacity;\n\n          /**\n           * Gets or sets how fast (opacity per second) the wave fades out.\n           *\n           * @type {Number}\n           */\n          this.opacityDecayVelocity = opacityDecayVelocity;\n\n          /**\n           * @type {PaperWave[]}\n           * @private\n           */\n          this._waves = [];\n\n          this._initTarget(cfg && cfg.nodeType ? cfg : target && target.nodeType ? target : null);\n\n          /**\n           * @type {Boolean}\n           * @private\n           */\n          this.recenters = recenters || this.recenters;\n\n          /**\n           * @type {Boolean}\n           * @private\n           */\n          this.center = center || this.center;\n\n          /**\n           * @type {Boolean}\n           * @private\n           */\n          this.round = round || this.round;\n\n          return this;\n        }\n\n        /**\n         * Determines whether all the waves should be re-centered towards the center of the container.\n         *\n         * @returns {Boolean} If `true`, waves will exhibit a gravitational pull towards the center of the container as they fade away.\n         */\n\n\n        _createClass(PaperRipple, [{\n          key: '_initTarget',\n          value: function _initTarget() {\n            var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n            // eslint-disable-next-line no-use-before-define\n            var _doc = _doc || window.document;\n\n            if (!this.$) {\n              /**\n               * The object wrapper containing all the DOM elements belongs to the current instance.\n               *\n               * @type {Object}\n               */\n              this.$ = target || _doc.createElement('div');\n              this.$.classList.add('paper-ripple');\n            }\n\n            if (!this.$background) {\n              /**\n               * The object wrapper containing the `$background` DOM element belongs to the current instance.\n               *\n               * @type {Object}\n               */\n              this.$background = target && target.querySelector('.paper-ripple__background') || _doc.createElement('div');\n\n              this.$background.classList.add('paper-ripple__background');\n              this.$.appendChild(this.$background);\n            }\n\n            if (!this.$waves) {\n              /**\n               * The object wrapper containing the waves container belongs to the current instance.\n               *\n               * @type {Object}\n               */\n              this.$waves = target && target.querySelector('.paper-ripple__waves') || _doc.createElement('div');\n\n              this.$waves.classList.add('paper-ripple__waves');\n              this.$.appendChild(this.$waves);\n            }\n\n            return this;\n          }\n        }, {\n          key: 'addWave',\n          value: function addWave() {\n            var wave = new PaperWave(this);\n\n            this.$waves.appendChild(wave.$);\n            this.$background.style.backgroundColor = wave.color;\n            this._waves.push(wave);\n\n            return wave;\n          }\n        }, {\n          key: 'downAction',\n          value: function downAction(ev) {\n            var wave = this.addWave();\n\n            wave.downAction(ev);\n            this.animate();\n\n            return this;\n          }\n        }, {\n          key: 'upAction',\n          value: function upAction() {\n            this._waves.forEach(function (wave) {\n              wave.upAction();\n            });\n\n            this.animate();\n\n            return this;\n          }\n        }, {\n          key: 'removeWave',\n          value: function removeWave(wave) {\n            var waveIndex = this._waves.indexOf(wave);\n\n            if (waveIndex < 0) {\n              return this;\n            }\n\n            this._waves.splice(waveIndex, 1);\n\n            wave.remove();\n\n            return this;\n          }\n        }, {\n          key: 'animate',\n          value: function animate() {\n            var i = void 0,\n                l = void 0,\n                wave = void 0;\n\n            for (i = 0, l = this._waves.length; i < l; i++) {\n              wave = this._waves[i];\n\n              if (wave) {\n                wave.draw();\n\n                this.$background.style.opacity = wave.outerOpacity;\n\n                if (wave.isWaveFullyOpaque && !wave.isMaxRadiusReached) {\n                  this.removeWave(wave);\n                }\n              }\n            }\n\n            if (!this.shouldKeepAnimating && this._waves.length === 0) {\n              this.$background.style.backgroundColor = null;\n            } else {\n              window.requestAnimationFrame(this.animate.bind(this));\n            }\n\n            return this;\n          }\n        }, {\n          key: 'recenters',\n          get: function get() {\n            return this.$.hasAttribute('recenters');\n          },\n          set: function set(newValue) {\n            this.$[newValue ? 'setAttribute' : 'removeAttribute']('recenters', '');\n          }\n        }, {\n          key: 'center',\n          get: function get() {\n            return this.$.hasAttribute('center');\n          },\n          set: function set(newValue) {\n            this.$[newValue ? 'setAttribute' : 'removeAttribute']('center', '');\n          }\n        }, {\n          key: 'round',\n          get: function get() {\n            return this.$.classList.contains('paper-ripple--round');\n          },\n          set: function set(newValue) {\n            this.$.classList.toggle('paper-ripple--round', newValue);\n          }\n        }, {\n          key: 'shouldKeepAnimating',\n          get: function get() {\n            return this._waves.some(function (wave) {\n              return !wave.isAnimationComplete;\n            });\n          }\n        }]);\n\n        return PaperRipple;\n      }();\n\n      module.exports = PaperRipple;\n    }\n  };\n});\n//# sourceMappingURL=PaperRipple.js.map\n"]}