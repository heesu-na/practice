/*
 * This file/code is part of Paper UI project.
 *
 * Paper UI - is a modern front-end framework based on Material Design by Google
 * https://github.com/virtyaluk/paper-ui
 *
 * Copyright (c) 2015 Bohdan Shtepan
 * http://modern-dev.com/
 *
 * Licensed under the MIT license.
 */
 {"version":3,"sources":["paperRipple.jquery.js"],"names":["window","$","module","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","ElementRect","element","this","_element","width","boundingRect","height","size","Math","max","value","_ref","_ref$x","x","undefined","_ref$y","y","euclideanDistance","_ref2","clientX","clientY","l","left","t","top","w","h","_x","_y","get","getBoundingClientRect","point1","point2","sqrt","pow","_window","_doc","document","_now","performance","now","bind","Date","PaperWave","_ref3","_ref3$recenters","recenters","_ref3$center","center","_ref3$initialOpacity","initialOpacity","_ref3$opacityDecayVel","opacityDecayVelocity","color","getComputedStyle","containerRect","$wave","createElement","classList","add","style","backgroundColor","appendChild","resetDefaults","maxRadius","touchDownStarted","touchUpStarted","startPosition","endPosition","cssString","scaleFactor","radius","containerCenter","currentPos","currentPosition","deltaPos","opacity","webkitTransform","mozTransform","msTransform","oTransform","transform","event","arguments","distanceToFarthestCorner","isTouchDown","parentNode","removeChild","elapsed","touchUpElapsed","touchDownElapsed","touchDownElapsedSeconds","touchUpElapsedSeconds","min","MAX_RADIUS","currentTime","mouseInteractionSeconds","actualRadius","abs","isWaveFullyOpaque","isMaxRadiusReached","translateFraction","translationFraction","PaperRipple","cfg","_ref4","_ref4$initialOpacity","_ref4$opacityDecayVel","_ref4$recenters","_ref4$center","_ref4$round","round","_ref4$target","_waves","_initTarget","nodeType","$background","querySelector","$waves","wave","push","ev","addWave","downAction","animate","forEach","upAction","waveIndex","indexOf","splice","remove","draw","outerOpacity","removeWave","shouldKeepAnimating","requestAnimationFrame","hasAttribute","set","newValue","contains","toggle","some","isAnimationComplete","exports","_touchEvents","navigator","msPointerEnabled","PointerEvent","down","up","fn","paperRipple","options","each","ripple","e","prepend","on","jQuery"],"mappings":"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","file":"paperRipple.jquery.js","sourcesContent":["/*\n * This file/code is part of Paper UI project.\n *\n * Paper UI - is a modern front-end framework based on Material Design by Google\n * https://github.com/virtyaluk/paper-ui\n *\n * Copyright (c) 2015 Bohdan Shtepan\n * http://modern-dev.com/\n *\n * Licensed under the MIT license.\n */\n ;(function(window, $, module) {\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * This file\\code is part of Paper UI project.\n *\n * Paper UI - is a modern front-end framework based on Material Design by Google\n * https://github.com/virtyaluk/paper-ui\n *\n * Copyright (c) 2015 Bohdan Shtepan\n * http://modern-dev.com/\n *\n * Licensed under the MIT license.\n */\n\n/*eslint no-unused-vars: 0*/\n\n/**\n * Provides the utilities for getting element's metrics.\n *\n * @class ElementRect\n */\nvar ElementRect = function () {\n  /**\n   * Initializes a new instance of the `ElementRect` class with the specified `element`.\n   *\n   * @constructs ElementRect\n   * @param {HTMLElement} element - The DOM element to get metrics from\n   * @returns {ElementRect} The new instance of a class.\n   */\n  function ElementRect(element) {\n    _classCallCheck(this, ElementRect);\n\n    this._element = element;\n\n    /**\n     * Returns the width of the current element.\n     *\n     * @type {Number}\n     */\n    this.width = this.boundingRect.width;\n\n    /**\n     * Returns the height of the current element.\n     *\n     * @type {Number}\n     */\n    this.height = this.boundingRect.height;\n\n    /**\n     * Returns the size (the biggest side) of the current element.\n     *\n     * @type {number}\n     */\n    this.size = Math.max(this.width, this.height);\n\n    return this;\n  }\n\n  /**\n   * Returns the center coordinates of the current element.\n   *\n   * @returns {{ x: Number, y: Number }} Object containing coordinates of the element's center.\n   */\n\n\n  _createClass(ElementRect, [{\n    key: 'distanceToFarthestCorner',\n\n\n    /**\n     * Calculates the distance between given point and farthest corner of the current element.\n     *\n     * @param {{ x: Number, y:Number }} [point={x:0,y:0}] - The point object containing x and y coordinates.\n     * @returns {Number} Distance from a point to the container's farthest corner.\n     */\n    value: function distanceToFarthestCorner(_ref) {\n      var _ref$x = _ref.x,\n          x = _ref$x === undefined ? 0 : _ref$x,\n          _ref$y = _ref.y,\n          y = _ref$y === undefined ? 0 : _ref$y;\n\n      return Math.max(ElementRect.euclideanDistance({ x: x, y: y }, { x: 0, y: 0 }), ElementRect.euclideanDistance({ x: x, y: y }, { x: this.width, y: 0 }), ElementRect.euclideanDistance({ x: x, y: y }, { x: 0, y: this.height }), ElementRect.euclideanDistance({ x: x, y: y }, { x: this.width, y: this.height }));\n    }\n\n    /**\n     *  Determines if the specified point is contained within this element.\n     *\n     * @param {(Event|Object)} ev - The object containing coordinates of the point.\n     * @param {Number} ev.x - The `x` coordinate of the point.\n     * @param {Number} ev.y - The `y` coordinate of the point.\n     * @param {Number} ev.clientX - The `x` coordinate of the point.\n     * @param {Number} ev.clientY - The `y` coordinate of the point.\n     * @returns {Boolean} Returns `true` if the `x` and `y` coordinates of point is a point inside this element's rectangle, otherwise `false`.\n     */\n\n  }, {\n    key: 'contains',\n    value: function contains(_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y,\n          clientX = _ref2.clientX,\n          clientY = _ref2.clientY;\n\n      var l = this.boundingRect.left,\n          t = this.boundingRect.top,\n          w = this.boundingRect.width,\n          h = this.boundingRect.height,\n          _x = x || clientX || 0,\n          _y = y || clientY || 0;\n\n      return _x >= l && _x <= l + w && _y >= t && _y <= t + h;\n    }\n  }, {\n    key: 'center',\n    get: function get() {\n      return {\n        x: this.width / 2,\n        y: this.height / 2\n      };\n    }\n\n    /**\n     * Returns the size of the current element and its position relative to the viewport.\n     *\n     * @returns {ClientRect} The returned value is a `ClientRect` object, which contains read-only `left`, `top`, `right` and `bottom` properties\n     * describing the border-box in pixels. `top` and `left` are relative to the top-left of the viewport.\n     */\n\n  }, {\n    key: 'boundingRect',\n    get: function get() {\n      return this._element.getBoundingClientRect();\n    }\n\n    /**\n     * Calculates euclidean distance between two points.\n     *\n     * @static\n     * @param {{ x: Number, y: Number }} point1 - Start point\n     * @param {{ x: Number, y: Number }} point2 - End point\n     * @returns {Number} Distance between two points.\n     */\n\n  }], [{\n    key: 'euclideanDistance',\n    value: function euclideanDistance(point1, point2) {\n      return Math.sqrt(Math.pow(point1.x - point2.x, 2) + Math.pow(point1.y - point2.y, 2));\n    }\n  }]);\n\n  return ElementRect;\n}();\n/**\n * This file\\code is part of Paper UI project.\n *\n * Paper UI - is a modern front-end framework based on Material Design by Google\n * https://github.com/virtyaluk/paper-ui\n *\n * Copyright (c) 2015 Bohdan Shtepan\n * http://modern-dev.com/\n *\n * Licensed under the MIT license.\n */\n\n/*eslint no-unused-vars: 0*/\n\nvar _window = window || undefined,\n    _doc = _window.document,\n    _now = function () {\n  return _window.performance && _window.performance.now ? _window.performance.now.bind(_window.performance) : Date.now;\n}();\n\n/**\n * Provides all the logic to produce a one-time rippling effect.\n *\n * @class PaperWave\n */\n\nvar PaperWave = function () {\n  /**\n   * Initializes a new instance of the `PaperWave` class with the specified `PaperRipple` instance.\n   *\n   * @constructs PaperWave\n   * @returns {PaperWave} The new instance of a class.\n   *\n   * @example\n   * var paperWave = new PaperWave(paperRipple);\n   *\n   * paperWave.downAction(null);\n   * paperWave.upAction();\n   *\n   * if (paperWave.isAnimationCompleted) {\n   *     paperWave.remove();\n   * }\n   */\n  function PaperWave(_ref3) {\n    var $ = _ref3.$,\n        _ref3$recenters = _ref3.recenters,\n        recenters = _ref3$recenters === undefined ? false : _ref3$recenters,\n        _ref3$center = _ref3.center,\n        center = _ref3$center === undefined ? false : _ref3$center,\n        _ref3$initialOpacity = _ref3.initialOpacity,\n        initialOpacity = _ref3$initialOpacity === undefined ? 0.25 : _ref3$initialOpacity,\n        _ref3$opacityDecayVel = _ref3.opacityDecayVelocity,\n        opacityDecayVelocity = _ref3$opacityDecayVel === undefined ? 0.8 : _ref3$opacityDecayVel;\n\n    _classCallCheck(this, PaperWave);\n\n    /**\n     * Gets or sets the color of the wave.\n     *\n     * @type {String}\n     */\n    this.color = _window.getComputedStyle($).color;\n\n    /**\n     * Gets or sets the container metrics of the wave.\n     *\n     * @type {ElementRect}\n     */\n    this.containerRect = new ElementRect($);\n\n    /**\n     * Determines whether the wave should be re-centered towards the center of its container.\n     *\n     * @type {Boolean}\n     */\n    this.recenters = recenters;\n\n    /**\n     * Determines whether the wave should start a movement from the center of its container.\n     *\n     * @type {Boolean}\n     */\n    this.center = center;\n\n    /**\n     * Gets initial opacity of the wave.\n     *\n     * @type {Number}\n     */\n    this.initialOpacity = initialOpacity;\n\n    /**\n     * Gets opacity decay velocity of the wave.\n     *\n     * @type {Number}\n     */\n    this.opacityDecayVelocity = opacityDecayVelocity;\n\n    /**\n     * Represents the object wrapped around the `wave` DOM element that belongs to the current instance.\n     *\n     * @type {Object}\n     */\n    this.$wave = _doc.createElement('div');\n\n    this.$wave.classList.add('paper-ripple__wave');\n    this.$wave.style.backgroundColor = this.color;\n\n    /**\n     * Represents the object wrapped around the main DOM element that belongs to the current instance.\n     *\n     * @type {Object}\n     */\n    this.$ = _doc.createElement('div');\n\n    this.$.classList.add('paper-ripple__wave-container');\n    this.$.appendChild(this.$wave);\n\n    this.resetDefaults();\n\n    return this;\n  }\n\n  /**\n   * Represents the max possible value of the wave's radius.\n   *\n   * @const {Number}\n   * @default\n   */\n\n\n  _createClass(PaperWave, [{\n    key: 'resetDefaults',\n\n\n    /**\n     * Resets all the wave's values.\n     *\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n    value: function resetDefaults() {\n      /**\n       * Gets or sets max radius of the wave.\n       *\n       * @type {Number}\n       */\n      this.maxRadius = 0;\n\n      /**\n       * Gets or sets the time of starting interaction with the wave.\n       *\n       * @type {Number}\n       */\n      this.touchDownStarted = 0;\n\n      /**\n       * Gets or sets the time of ending interaction with the wave.\n       *\n       * @type {Number}\n       */\n      this.touchUpStarted = 0;\n\n      /**\n       * Gets or sets the start position of the wave.\n       *\n       * @type {{x: Number, y: Number}}\n       */\n      this.startPosition = { x: 0, y: 0 };\n\n      /**\n       * Gets or sets the end position of the wave.\n       *\n       * @type {{x: Number, y: Number}}\n       */\n      this.endPosition = { x: 0, y: 0 };\n\n      return this;\n    }\n\n    /**\n     * Performs updating of the wave's values.\n     *\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n\n  }, {\n    key: 'draw',\n    value: function draw() {\n      var cssString = void 0,\n          scaleFactor = this.radius / (this.containerRect.size / 2),\n          containerCenter = this.containerRect.center,\n          currentPos = this.currentPosition,\n          deltaPos = {\n        x: currentPos.x - containerCenter.x,\n        y: currentPos.y - containerCenter.y\n      };\n\n      this.$wave.style.opacity = this.opacity;\n\n      cssString = 'translate(' + deltaPos.x + 'px, ' + deltaPos.y + 'px)';\n      this.$.style.webkitTransform = cssString;\n      this.$.style.mozTransform = cssString;\n      this.$.style.msTransform = cssString;\n      this.$.style.oTransform = cssString;\n      this.$.style.transform = 'translate3d(' + deltaPos.x + 'px, ' + deltaPos.y + 'px, 0)';\n\n      cssString = 'scale(' + scaleFactor + ',' + scaleFactor + ')';\n      this.$wave.style.webkitTransform = cssString;\n      this.$wave.style.mozTransform = cssString;\n      this.$wave.style.msTransform = cssString;\n      this.$wave.style.oTransform = cssString;\n      this.$wave.style.transform = 'scale3d(' + scaleFactor + ',' + scaleFactor + ', 1)';\n\n      return this;\n    }\n\n    /**\n     * Performs ripple-down effect on the current wave.\n     *\n     * @param {(Event|Object)} [event=null] - An object containing coordinates of interaction point to set start position of ripple effect.\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n\n  }, {\n    key: 'downAction',\n    value: function downAction() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      var containerCenter = this.containerRect.center;\n\n      this.resetDefaults();\n\n      this.touchDownStarted = _now();\n      this.startPosition = this.center || !event ? containerCenter : {\n        x: (event.clientX || event.x) - this.containerRect.boundingRect.left,\n        y: (event.clientY || event.y) - this.containerRect.boundingRect.top\n      };\n      this.endPosition = this.recenters ? containerCenter : this.endPosition;\n      this.maxRadius = this.containerRect.distanceToFarthestCorner(this.startPosition);\n\n      this.$.style.top = (this.containerRect.height - this.containerRect.size) / 2 + 'px';\n      this.$.style.left = (this.containerRect.width - this.containerRect.size) / 2 + 'px';\n      this.$.style.width = this.containerRect.size + 'px';\n      this.$.style.height = this.containerRect.size + 'px';\n\n      return this;\n    }\n\n    /**\n     * Performs ripple-up effect on the current wave.\n     *\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n\n  }, {\n    key: 'upAction',\n    value: function upAction() {\n      if (!this.isTouchDown) {\n        return this;\n      }\n\n      /**\n       * @private\n       */\n      this.touchUpStarted = _now();\n\n      return this;\n    }\n\n    /**\n     * Removes the wave from a DOM.\n     *\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n\n  }, {\n    key: 'remove',\n    value: function remove() {\n      this.$.parentNode.removeChild(this.$);\n\n      return this;\n    }\n  }, {\n    key: 'touchDownElapsed',\n\n\n    /**\n     * Gets the time in milliseconds elapsed from the moment where interaction with the wave was started.\n     *\n     * @returns {Number} The time in milliseconds.\n     */\n    get: function get() {\n      var elapsed;\n\n      if (!this.touchDownStarted) {\n        return 0;\n      }\n\n      elapsed = _now() - this.touchDownStarted;\n\n      if (this.touchUpStarted) {\n        elapsed -= this.touchUpElapsed;\n      }\n\n      return elapsed;\n    }\n\n    /**\n     * Gets the time in milliseconds elapsed from the moment where interaction with the wave was ended.\n     *\n     * @returns {Number} The time in milliseconds.\n     */\n\n  }, {\n    key: 'touchUpElapsed',\n    get: function get() {\n      return this.touchUpStarted ? _now() - this.touchUpStarted : 0;\n    }\n\n    /**\n     * Gets the time in seconds elapsed since the moment where interaction with the wave was started.\n     *\n     * @returns {Number} The time in seconds.\n     */\n\n  }, {\n    key: 'touchDownElapsedSeconds',\n    get: function get() {\n      return this.touchDownElapsed / 1000;\n    }\n\n    /**\n     * Gets the time in seconds elapsed since the moment where interaction with the wave was ended.\n     *\n     * @returns {number} The time in seconds.\n     */\n\n  }, {\n    key: 'touchUpElapsedSeconds',\n    get: function get() {\n      return this.touchUpElapsed / 1000;\n    }\n\n    /**\n     * Gets the total interaction time.\n     *\n     * @returns {Number} The time in seconds\n     */\n\n  }, {\n    key: 'mouseInteractionSeconds',\n    get: function get() {\n      return this.touchDownElapsedSeconds + this.touchUpElapsedSeconds;\n    }\n\n    /**\n     * Gets the wave's radius at the current time.\n     *\n     * @returns {Number} The value of the wave's radius.\n     */\n\n  }, {\n    key: 'radius',\n    get: function get() {\n      var radius = Math.min(Math.sqrt(Math.pow(this.containerRect.width, 2) + Math.pow(this.containerRect.height, 2)), PaperWave.MAX_RADIUS) * 1.1 + 5,\n          elapsed = 1.1 - 0.2 * (radius / PaperWave.MAX_RADIUS),\n          currentTime = this.mouseInteractionSeconds / elapsed,\n          actualRadius = radius * (1 - Math.pow(80, -currentTime));\n\n      return Math.abs(actualRadius);\n    }\n\n    /**\n     * Gets the wave's opacity at the current time.\n     *\n     * @returns {Number} The value of the wave's opacity.\n     */\n\n  }, {\n    key: 'opacity',\n    get: function get() {\n      if (!this.touchUpStarted) {\n        return this.initialOpacity;\n      }\n\n      return Math.max(0, this.initialOpacity - this.touchUpElapsedSeconds * this.opacityDecayVelocity);\n    }\n\n    /**\n     * Gets the wave's outer opacity at the current time.\n     *\n     * @returns {Number} The value of the wave's outer opacity.\n     */\n\n  }, {\n    key: 'outerOpacity',\n    get: function get() {\n      return Math.max(0, Math.min(this.touchUpElapsedSeconds * 0.3, this.opacity));\n    }\n\n    /**\n     * Determines whether the wave is fully opaque or not.\n     *\n     * @returns {Boolean} `true`, if so, otherwise `false`.\n     */\n\n  }, {\n    key: 'isWaveFullyOpaque',\n    get: function get() {\n      return this.opacity < 0.01 && this.radius >= Math.min(this.maxRadius, PaperWave.MAX_RADIUS);\n    }\n\n    /**\n     * Determines whether the wave reached its max radius or not.\n     *\n     * @returns {Boolean} `true`, if so, otherwise `false`.\n     */\n\n  }, {\n    key: 'isMaxRadiusReached',\n    get: function get() {\n      return this.opacity >= this.initialOpacity && this.radius >= Math.min(this.maxRadius, PaperWave.MAX_RADIUS);\n    }\n\n    /**\n     * Determines whether the animation of rippling effect completed or not.\n     *\n     * @returns {Boolean} `true`, if so, otherwise `false`.\n     */\n\n  }, {\n    key: 'isAnimationComplete',\n    get: function get() {\n      return this.touchUpStarted ? this.isWaveFullyOpaque : this.isMaxRadiusReached;\n    }\n\n    /**\n     * Gets the wave's translation fraction value.\n     *\n     * @returns {Number} The value of the wave's translation fraction.\n     */\n\n  }, {\n    key: 'translationFraction',\n    get: function get() {\n      return Math.min(1, this.radius / this.containerRect.size * 2 / Math.sqrt(2));\n    }\n\n    /**\n     * Gets the wave's current position.\n     *\n     * @returns {{x: Number, y: Number}} Object containing coordinates of the wave's current position.\n     */\n\n  }, {\n    key: 'currentPosition',\n    get: function get() {\n      var translateFraction = this.translationFraction,\n          x = this.startPosition.x,\n          y = this.startPosition.y;\n\n      if (this.endPosition.x) {\n        x = this.startPosition.x + translateFraction * (this.endPosition.x - this.startPosition.x);\n      }\n\n      if (this.endPosition.y) {\n        y = this.startPosition.y + translateFraction * (this.endPosition.y - this.startPosition.y);\n      }\n\n      return { x: x, y: y };\n    }\n\n    /**\n     * Determines whether the pointing device is still in interaction with the current wave.\n     *\n     * @returns {Boolean} `true`, if so, otherwise `false`.\n     */\n\n  }, {\n    key: 'isTouchDown',\n    get: function get() {\n      return this.touchDownStarted && !this.touchUpStarted;\n    }\n  }]);\n\n  return PaperWave;\n}();\n/**\n * This file\\code is part of Paper UI project.\n *\n * Paper UI - is a modern front-end framework based on Material Design by Google\n * https://github.com/virtyaluk/paper-ui\n *\n * Copyright (c) 2015 Bohdan Shtepan\n * http://modern-dev.com/\n *\n * Licensed under the MIT license.\n */\n\n/**\n * Provides all the logic to produce ripple visual effect.\n * Other elements can use it to simulate rippling effect emanating from the point of contact.\n *\n * @class PaperRipple\n */\n\n\nPaperWave.MAX_RADIUS = 300;\n\nvar PaperRipple = function () {\n  /**\n   * Initializes a new instance of the `PaperRipple` class with the specified `config` object.\n   *\n   * @constructs PaperRipple\n   * @param {(Object|Element)} [cfg={}] - A configuration object.\n   * @param {Number} [cfg.initialOpacity=0.25] - The initial opacity of the each wave.\n   * @param {Number} [cfg.opacityDecayVelocity=0.8] - How fast (opacity per second) the wave fades out.\n   * @param {Boolean} [cfg.recenters=false] - If `true`, waves will exhibit a gravitational pull towards the center of their container as they fade away.\n   * @param {Boolean} [cfg.center=false] - If `true`, waves will center inside its container.\n   * @param {Boolean} [cfg.round=false] - If `true`, ripple effect will apply within a circle.\n   * @param {Element} [cfg.target=null] - Target DOM element as the container for the waves.\n   * If target element is not presented, then new one will be created automatically.\n   * @returns {PaperRipple} The new instance of a class.\n   *\n   * @example\n   * // Creating the new instance\n   * var ripple = new PaperRipple({ recenters: true });\n   *\n   * // Appending it to another DOM element\n   * ripple.$.appendTo(someEl);\n   *\n   * // Listening to that element's events and performing ripple effect\n   * someEl.on({\n   *     mousedown: function(ev) {\n   *         ripple.downAction(ev);\n   *     },\n   *     mouseup: function() {\n   *         ripple.upAction();\n   *     }\n   * );\n   */\n  function PaperRipple(cfg) {\n    _classCallCheck(this, PaperRipple);\n\n    var _ref4 = cfg || {},\n        _ref4$initialOpacity = _ref4.initialOpacity,\n        initialOpacity = _ref4$initialOpacity === undefined ? 0.25 : _ref4$initialOpacity,\n        _ref4$opacityDecayVel = _ref4.opacityDecayVelocity,\n        opacityDecayVelocity = _ref4$opacityDecayVel === undefined ? 0.8 : _ref4$opacityDecayVel,\n        _ref4$recenters = _ref4.recenters,\n        recenters = _ref4$recenters === undefined ? false : _ref4$recenters,\n        _ref4$center = _ref4.center,\n        center = _ref4$center === undefined ? false : _ref4$center,\n        _ref4$round = _ref4.round,\n        round = _ref4$round === undefined ? false : _ref4$round,\n        _ref4$target = _ref4.target,\n        target = _ref4$target === undefined ? null : _ref4$target;\n\n    /**\n     * Gets or sets the initial opacity of the each wave.\n     *\n     * @type {Number}\n     */\n\n\n    this.initialOpacity = initialOpacity;\n\n    /**\n     * Gets or sets how fast (opacity per second) the wave fades out.\n     *\n     * @type {Number}\n     */\n    this.opacityDecayVelocity = opacityDecayVelocity;\n\n    /**\n     * @type {PaperWave[]}\n     * @private\n     */\n    this._waves = [];\n\n    this._initTarget(cfg && cfg.nodeType ? cfg : target && target.nodeType ? target : null);\n\n    /**\n     * @type {Boolean}\n     * @private\n     */\n    this.recenters = recenters || this.recenters;\n\n    /**\n     * @type {Boolean}\n     * @private\n     */\n    this.center = center || this.center;\n\n    /**\n     * @type {Boolean}\n     * @private\n     */\n    this.round = round || this.round;\n\n    return this;\n  }\n\n  /**\n   * Determines whether all the waves should be re-centered towards the center of the container.\n   *\n   * @returns {Boolean} If `true`, waves will exhibit a gravitational pull towards the center of the container as they fade away.\n   */\n\n\n  _createClass(PaperRipple, [{\n    key: '_initTarget',\n\n\n    /**\n     * @param {HTMLElement} [target=null] - Target DOM element.\n     * @returns {PaperRipple} Current instance for method chaining.\n     * @private\n     */\n    value: function _initTarget() {\n      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      // eslint-disable-next-line no-use-before-define\n      var _doc = _doc || window.document;\n\n      if (!this.$) {\n        /**\n         * The object wrapper containing all the DOM elements belongs to the current instance.\n         *\n         * @type {Object}\n         */\n        this.$ = target || _doc.createElement('div');\n        this.$.classList.add('paper-ripple');\n      }\n\n      if (!this.$background) {\n        /**\n         * The object wrapper containing the `$background` DOM element belongs to the current instance.\n         *\n         * @type {Object}\n         */\n        this.$background = target && target.querySelector('.paper-ripple__background') || _doc.createElement('div');\n\n        this.$background.classList.add('paper-ripple__background');\n        this.$.appendChild(this.$background);\n      }\n\n      if (!this.$waves) {\n        /**\n         * The object wrapper containing the waves container belongs to the current instance.\n         *\n         * @type {Object}\n         */\n        this.$waves = target && target.querySelector('.paper-ripple__waves') || _doc.createElement('div');\n\n        this.$waves.classList.add('paper-ripple__waves');\n        this.$.appendChild(this.$waves);\n      }\n\n      return this;\n    }\n\n    /**\n     * Adds new wave to the list of visual ripples.\n     *\n     * @returns {PaperWave} Current instance for method chaining.\n     */\n\n  }, {\n    key: 'addWave',\n    value: function addWave() {\n      var wave = new PaperWave(this);\n\n      this.$waves.appendChild(wave.$);\n      this.$background.style.backgroundColor = wave.color;\n      this._waves.push(wave);\n\n      return wave;\n    }\n\n    /**\n     * Produces a ripple-down effect.\n     *\n     * @param {(Event|{clientX: Number, clientY: Number}|{x: Number, y: Number})} [ev=null] - Object containing coordinates of the point of contact.\n     * @returns {PaperRipple} Current instance for method chaining.\n     */\n\n  }, {\n    key: 'downAction',\n    value: function downAction(ev) {\n      var wave = this.addWave();\n\n      wave.downAction(ev);\n      this.animate();\n\n      return this;\n    }\n\n    /**\n     * Produces a ripple-up effect.\n     *\n     * @returns {PaperRipple} Current instance for method chaining.\n     */\n\n  }, {\n    key: 'upAction',\n    value: function upAction() {\n      this._waves.forEach(function (wave) {\n        wave.upAction();\n      });\n\n      this.animate();\n\n      return this;\n    }\n\n    /**\n     * Removes given wave from the list of visual ripples.\n     *\n     * @param {PaperWave} wave - The wave to remove.\n     * @returns {PaperRipple} Current instance for method chaining.\n     */\n\n  }, {\n    key: 'removeWave',\n    value: function removeWave(wave) {\n      var waveIndex = this._waves.indexOf(wave);\n\n      if (waveIndex < 0) {\n        return this;\n      }\n\n      this._waves.splice(waveIndex, 1);\n\n      wave.remove();\n\n      return this;\n    }\n\n    /**\n     * Animates all the waves in the list of visual ripples.\n     *\n     * @returns {PaperRipple} Current instance for method chaining.\n     */\n\n  }, {\n    key: 'animate',\n    value: function animate() {\n      var i = void 0,\n          l = void 0,\n          wave = void 0;\n\n      for (i = 0, l = this._waves.length; i < l; i++) {\n        wave = this._waves[i];\n\n        if (wave) {\n          wave.draw();\n\n          this.$background.style.opacity = wave.outerOpacity;\n\n          if (wave.isWaveFullyOpaque && !wave.isMaxRadiusReached) {\n            this.removeWave(wave);\n          }\n        }\n      }\n\n      if (!this.shouldKeepAnimating && this._waves.length === 0) {\n        this.$background.style.backgroundColor = null;\n      } else {\n        window.requestAnimationFrame(this.animate.bind(this));\n      }\n\n      return this;\n    }\n  }, {\n    key: 'recenters',\n    get: function get() {\n      return this.$.hasAttribute('recenters');\n    }\n\n    /**\n     * Sets the value that indicates whether all the waves should be re-centered towards the center of the container.\n     *\n     * @param {Boolean} [newValue=false] - The new value.\n     * @returns {void} Nothing.\n     */\n    ,\n    set: function set(newValue) {\n      this.$[newValue ? 'setAttribute' : 'removeAttribute']('recenters', '');\n    }\n\n    /**\n     * Determines whether all the waves should start a movement from the center of the container.\n     *\n     * @returns {Boolean} If `true`, waves will center inside its container\n     */\n\n  }, {\n    key: 'center',\n    get: function get() {\n      return this.$.hasAttribute('center');\n    }\n\n    /**\n     * Sets the value that indicates whether all the waves should start a movement from the center of the container.\n     *\n     * @param {Boolean} [newValue=false] - The new value.\n     * @returns {void} Nothing.\n     */\n    ,\n    set: function set(newValue) {\n      this.$[newValue ? 'setAttribute' : 'removeAttribute']('center', '');\n    }\n\n    /**\n     * Determines whether ripple effect should apply within a circle.\n     *\n     * @returns {Boolean} If `true`, ripple effect will apply within a circle.\n     */\n\n  }, {\n    key: 'round',\n    get: function get() {\n      return this.$.classList.contains('paper-ripple--round');\n    }\n\n    /**\n     * Sets the value that indicates whether ripple effect should apply within a circle.\n     *\n     * @param {Boolean} [newValue=false] - The new value.\n     * @returns {void} Nothing.\n     */\n    ,\n    set: function set(newValue) {\n      this.$.classList.toggle('paper-ripple--round', newValue);\n    }\n\n    /**\n     * Determines whether the ripple should keep animating or not.\n     *\n     * @returns {Boolean} `true`, if so, otherwise `false`.\n     */\n\n  }, {\n    key: 'shouldKeepAnimating',\n    get: function get() {\n      return this._waves.some(function (wave) {\n        return !wave.isAnimationComplete;\n      });\n    }\n  }]);\n\n  return PaperRipple;\n}();\n\nmodule.exports = PaperRipple;\n/**\n * This file\\code is part of Paper UI project.\n *\n * Paper UI - is a modern front-end framework based on Material Design by Google\n * https://github.com/virtyaluk/paper-ui\n *\n * Copyright (c) 2015 Bohdan Shtepan\n * http://modern-dev.com/\n *\n * Licensed under the MIT license.\n */\n\nvar _touchEvents = function () {\n  return window.navigator.msPointerEnabled ? window.PointerEvent ? { down: 'pointerdown', up: 'pointerup' } : { down: 'MSPointerDown', up: 'MSPointerUp' } : { down: 'touchstart', up: 'touchend' };\n}();\n\n/**\n * paperRipple - makes each element in the current set able to produce a rippling effect within the element each time user interacts with the element.\n *\n * @param {(Object|HTMLElement)} [options=null] - A configuration object.\n * @returns {jQuery} Return the jQuery object itself.\n * @class paperRipple\n * @memberOf jQuery.fn\n */\n$.fn.paperRipple = function (options) {\n  return this.each(function () {\n    var ripple = new PaperRipple(options),\n        ev = {};\n\n    ev['mousedown ' + _touchEvents.down] = function (e) {\n      ripple.downAction(e);\n    };\n    ev['mouseup ' + _touchEvents.up] = function () {\n      ripple.upAction();\n    };\n\n    $(this).prepend(ripple.$).on(ev);\n  });\n};\n//# sourceMappingURL=paperRipple.jquery.js.map\n}(window, jQuery, {}));\n"]}